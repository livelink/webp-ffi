require 'ffi-compiler/compile_task'
require 'mini_portile2'

WEBP = MiniPortile.new('libwebp', '1.2.4')
WEBP.files = ['https://storage.googleapis.com/downloads.webmproject.org/releases/webp/libwebp-1.2.4.tar.gz']
WEBP.configure_options << '--disable-gl' << '--disable-sdl'
task :libwebp do
  old_cflags = ENV['CFLAGS']
  ENV['CFLAGS'] = (ENV['CFLAGS'].to_s + ' -fPIC').strip
  WEBP.cook
  ENV['CFLAGS'] = old_cflags
  WEBP.activate
end
task default: :libwebp

FFI::Compiler::CompileTask.new('webp_ffi') do |c|
  c.ldflags << '-L' + File.join(WEBP.path, 'lib')
  c.cflags << '-I' + File.join(WEBP.path, 'include')

  c.have_header?('stdio.h', '/usr/local/include')
  c.have_func?('puts')
  c.have_library?('z')
  # webp
  c.have_header?('decode.h', '/usr/local/include')
  c.have_header?('encode.h', '/usr/local/include')
  c.have_func?('WebPDecoderConfig')
  c.have_func?('WebPGetInfo')
  c.have_library?('webp')
  # libs
  c.have_library?('png')
  c.have_library?('jpeg')
  c.have_library?('tiff')
  c.ldflags << ENV['LD_FLAGS'] if ENV['LD_FLAGS']
  c.cflags << ENV['C_FLAGS'] if ENV['C_FLAGS']
end
